

一、 Object.create
     var person = {
          name:"EvanChen",
          friends:["Shelby","Court","Van"]
      };
      var anotherPerson = Object.create(person);
      anotherPerson.name = "Greg";
      anotherPerson.friends.push("Rob");
      var yetAnotherPerson = Object.create(person);//继承
      yetAnotherPerson.name = "Linda";
      yetAnotherPerson.friends.push("Barbie");
      console.log(person.friends);//"Shelby","Court","Van","Rob","Barbie"
      console.log(yetAnotherPerson);//
      console.log(anotherPerson);//


二、 构造函数 call  && apply  --- 只能继承父类的实例属性和方法，不能继承原型属性/方法
    function SuperType() {
      this.colors = ["red","blue","green"];
    }
    function SubType() {
      SuperType.call(this);//继承了SuperType
    }
    var instance1 = new SubType();
    instance1.colors.push("black");
    console.log(instance1.colors);//"red","blue","green","black"
    var instance2 = new SubType();
    console.log(instance2.colors);//"red","blue","green"

    
 三、 原型链  实现继承
      function Graph() {
        this.vertices = [];
        this.edges = [];
      }

      Graph.prototype = {
        addVertex: function(v){
          this.vertices.push(v);
        }
      };

      var g = new Graph();
      // g是生成的对象,他的自身属性有'vertices'和'edges'.
      // 在g被实例化时,g.__proto__指向了Graph.prototype.
 
 四、 实例继承
      // 定义一个动物类
      function Animal (name) {
        // 属性
        this.name = name || 'Animal';
        // 实例方法
        this.sleep = function(){
          console.log(this.name + '正在睡觉！');
        }
      }
      // 原型方法
      Animal.prototype.eat = function(food) {
        console.log(this.name + '正在吃：' + food);
      };

      function Cat(name){
        var instance = new Animal();
        instance.name = name || 'Tom';
        return instance;
      }

      // Test Code
      var cat = new Cat();
      console.log(cat.name);
      console.log(cat.sleep());
      console.log(cat instanceof Animal); // true
      console.log(cat instanceof Cat); // false
 
 
 
